<script type="text/javascript">

   var game, statusLabel, moves, discs, pegs, selectedDisc;

   var gameWidth = 800;
   var gameHeight = 600;

   game = new Phaser.Game(gameWidth, gameHeight, Phaser.CANVAS, 'gameArea', {preload: preload, create: create});

   function preload() {
      game.load.image('disc_normal', '/assets/images/games/disc_unselected.png');
      game.load.image('disc_selected', '/assets/images/games/disc_selected.png');
      game.load.image('peg', '/assets/images/games/peg.png');
   }

   var numDiscs = 3;
   var discPadding = 5;

   discs = [];
   pegs = [];

   selectedDisc = null;

   function create() {
      game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.pageAlignVertically = true;
      this.game.scale.refresh();

      var pegY = gameHeight / 2;

      ['A', 'B', 'C'].forEach(function (pegName, i) {
         var peg = game.add.sprite(gameWidth / 4 * (i + 1), pegY, 'peg');

         peg.anchor.setTo(0.5);
         peg.scale.setTo(0.1, 0.1);
         peg.name = i;
         peg.inputEnabled = true;
         peg.events.onInputDown.add(pegClick, this);

         pegs.push(peg);
      });

      for (var discNumber = 0; discNumber < numDiscs; discNumber++) {
         var disc;

         disc = game.add.sprite(0, 0, 'disc_normal');
         disc.name = discNumber;
         disc.anchor.setTo(0.5);
         disc.scale.setTo(0.15 - 0.125 * discNumber / numDiscs, 0.1);

         moveTo(disc, pegs[0]);

         disc.inputEnabled = true;
         disc.events.onInputDown.add(discClick, this);

         discs.push(disc);
      }

      moves = 0;

      statusLabel = game.add.text(game.world.centerX, 50, 'Moves:', {fill: '#ffffff'});
      statusLabel.anchor.x = Math.round(statusLabel.width * 0.5) / statusLabel.width;
      statusLabel.text = "Moves: " + moves
   }

   function getDiscs(peg) {
      return discs.filter(function (disc) {
         return disc.peg === peg;
      });
   }

   function getTopDisc(peg) {
      var filteredDiscs = getDiscs(peg);

      return filteredDiscs[filteredDiscs.length - 1];
   }

   function discClick(disc) {
      if (isComplete() || !disc)
         return;

      if (selectedDisc)
         selectedDisc.loadTexture('disc_normal');

      if (getTopDisc(disc.peg) === disc) {
         selectedDisc = disc;
         disc.loadTexture('disc_selected');
      }
   }

   function moveTo(disc, peg) {
      disc.x = peg.x;
      disc.y = peg.y + peg.height / 2 - (disc.height + discPadding) * (getDiscs(peg).length + 1);

      disc.peg = peg;

      moves++;
   }

   function isComplete() {
      // game objective is complete if moved all to any *but* starting peg
      return pegs.slice(1).some(function (peg) {
         return getDiscs(peg).length === numDiscs;
      });
   }

   function pegClick(peg) {
      var topDisc;

      if (isComplete())
         return;

      topDisc = getTopDisc(peg);

      if (!selectedDisc) {
         // treat peg clicks (when nothing selected) as implicit selection of top disc for ease of use
         discClick(topDisc);
      } else {
         if (!topDisc || selectedDisc.width < topDisc.width)
            moveTo(selectedDisc, peg);

         selectedDisc.loadTexture('disc_normal');
         selectedDisc = null;
      }

      if (isComplete())
         statusLabel.text = "You finished in " + moves + " moves!";
      else
         statusLabel.text = "Moves: " + moves;

      ajax('post', '/games/logging/record_click', ko.toJSON({
         complete: isComplete(),
         item: peg.name,
         move: moves
      }));
   }
</script>
